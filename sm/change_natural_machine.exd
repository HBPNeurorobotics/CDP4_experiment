#!/usr/bin/env python

import hbp_nrp_excontrol.nrp_states as states
from smach import StateMachine
from smach.state import State

import rospy
from rospy import ServiceProxy

from nrp_states import SetModelPose

from std_msgs.msg import Float64, String, Empty
from geometry_msgs.msg import Vector3, Quaternion
from ros_holographic.srv import ClearMemory, ClearMemoryRequest, Dump, DumpRequest

import time
import os
import math

result_dir = os.path.expanduser('~') + "/.ros/cdp4/%s" % time.strftime("exp_%Y-%m-%d-%H:%M:%S")
if not os.path.exists(result_dir):
  os.makedirs(result_dir)

FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'
preempted = 'preempted'

sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED, preempted])

import hbp_nrp_excontrol.nrp_states as states

class ExportMemoryState(State):
  def __init__(self, outcomes=['success']):
    super(ExportMemoryState, self).__init__(outcomes=outcomes)
    self._export_memory_proxy = rospy.ServiceProxy('/dump', Dump)
    self._export_memory_msg = DumpRequest()
 
  def execute(self, userdata):
    self._export_memory_msg.Path = "%s/%s.vec" % (result_dir, time.strftime("%Y-%m-%d-%H:%M:%S"))
    self._export_memory_proxy(self._export_memory_msg)
    return 'success'

class ResetNodesState(State):
  def __init__(self, outcomes=['success']):
    super(ResetNodesState, self).__init__(outcomes=outcomes)

    self._clear_memory_proxy = rospy.ServiceProxy('/clear_memory', ClearMemory)
    self._clear_memory_msg = ClearMemoryRequest()

    self._reset_pan_eye_left_pub = rospy.Publisher('/hollie/left_eye_pan_position_controller/command', Float64, queue_size=1)
    self._reset_pan_eye_right_pub = rospy.Publisher('/hollie/right_eye_pan_position_controller/command', Float64, queue_size=1)
    self._reset_tilt_eye_pub = rospy.Publisher('/hollie/eye_tilt_position_controller/command', Float64, queue_size=1)
    self._reset_pan_head_pub = rospy.Publisher('/hollie/neck_yaw_position_controller/command', Float64, queue_size=1)
    self._reset_tilt_head_pub = rospy.Publisher('/hollie/neck_pitch_position_controller/command', Float64, queue_size=1)

    self._reset_saccade_pub = rospy.Publisher('/reset', Empty, queue_size=1)

    self._status_pub = rospy.Publisher('/status', String, queue_size=1)

  def execute(self, userdata):
    self._clear_memory_proxy(self._clear_memory_msg)
    self._reset_pan_eye_left_pub.publish(Float64(0.0))
    self._reset_pan_eye_right_pub.publish(Float64(0.0))
    self._reset_tilt_eye_pub.publish(Float64(0.0))
    self._reset_pan_head_pub.publish(Float64(0.0))
    self._reset_tilt_head_pub.publish(Float64(0.0))
    self._reset_saccade_pub.publish(Empty())
    self._status_pub.publish(String('reset'))
    return 'success'

with sm:
  StateMachine.add(
    'wait',
    states.ClockDelayState(waittime=5),
    transitions = {'valid': 'wait', 'invalid': 'export_memory', 'preempted': PREEMPTED}
  )

  StateMachine.add(
    'export_memory',
    ExportMemoryState(),
    transitions = {'success': 'move_plant'}
  )

  StateMachine.add(
    'move_plant',
    SetModelPose("hosta_potted_plant_1", Vector3(0.811313, -1.0847, -0.002588), Quaternion(0.0, 0.0, math.pi, 0.0), Vector3(1.0, 1.0, 1.0)),
    transitions = {'succeeded': 'move_bottle', 'aborted': ERROR, 'preempted': PREEMPTED}
  )

  StateMachine.add(
    'move_bottle',
    SetModelPose("biologylabbottle_0", Vector3(-5.34493, -1.5313, 2.83832), Quaternion(0.0, 0.0, math.pi, 0.0), Vector3(1.0, 1.0, 1.0)),
    transitions = {'succeeded': 'wait2', 'aborted': ERROR, 'preempted': PREEMPTED}
  )

  StateMachine.add(
    'wait2',
    states.ClockDelayState(waittime=5),
    transitions = {'valid': 'wait2', 'invalid': 'export_memory2', 'preempted': PREEMPTED}
  )

  StateMachine.add(
    'export_memory2',
    ExportMemoryState(),
    transitions = {'success': 'reset_nodes2'}
  )

  StateMachine.add(
    'reset_nodes2',
    ResetNodesState(),
    transitions = {'success': FINISHED}
  )
